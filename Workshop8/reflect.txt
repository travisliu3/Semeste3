/*
*****************************************************************************
						OOP244-Workshop-8, part-2
Full Name  : Travis Liu
e-mail     : tliu84@myseneca.ca
Student ID#: 156740201
Date       : 14 November, 2022
Section    : ZAA

I have done all the coding by myself and only copied the code that my
professor provided to complete my workshops and assignments.
*****************************************************************************
*/
I learnt about the Luhn Algorithm.
eg-int sum{};
			for (size_t i = 0; i < sin.length(); i++)
			{
				std::string temp{};
				temp += sin[i];
				int check = std::stoi(temp);
				if (i % 2 != 0)
				{
					check *= 2;
					if (check > 9)
					{
						check -= 9;
					}
				}
				sum += check;
			}
			if (sum % 10 == 0)
			{
				return true;
			}
			return false;
In the above example, I am reading each sequence of number into a temp string in each iteration
and converting the digit to a number which is then stored in 'check' and if the iteration
number is even we add the 'check' to 'sum'. If the iteration number is odd we check if 'check'
is a 2 digit number when multiplied by 2 and if it is a two digit number, we subtract 9 from it
that gives us a sum of those two digit which is the added to the 'sum'.

advantage that smart pointer syntax provides.
eg-std::unique_ptr<EmployeeWage> wage(new EmployeeWage(emp[i].name, sal[j].salary));
					wage->rangeValidator();
					if (emp.checkSIN(emp[i].id))
					{
						activeEmp += wage;
					}
In the above example, I have created a unique_ptr called wage to store an address of
dynamic memory of type EmployeeWage in wage. wage represents a pointer to a EmployeeWage
which is automatically handeled when wage pointer goes out of scope. Whereas, in raw pointer
we had to delete the allocated resource manually in a try catch block. So, there is less chance
of have a memory leak when unique_ptr automatically handels the dynamic resource.


difference between raw and smart pointer syntax.
eg- // RawPointer
EmployeeWage* wage = new EmployeeWage(emp[i].name, sal[j].salary);
					try
					{
						wage->rangeValidator();
					}
					catch (const std::string& err)
					{
						delete wage;
						throw err;
					}
					if (emp.checkSIN(emp[i].id))
					{
						activeEmp += wage;
						delete wage;
					}

// SmartPointer
std::unique_ptr<EmployeeWage> wage(new EmployeeWage(emp[i].name, sal[j].salary));
					wage->rangeValidator();
					if (emp.checkSIN(emp[i].id))
					{
						activeEmp += wage;
					}

In the above example, raw pointer needs to release its resource in a try catch block to
prevent any memory leak. Whereas, In smart pointer the dynamic memory is being automatically
handeled when the wage pointer goes out of scop.