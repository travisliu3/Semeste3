/*
*****************************************************************************
				OOP244-Workshop-4
Full Name  : Travis Liu
e-mail     : tliu84@myseneca.ca
Student ID#: 156740201
Date       : 3 October, 2022
Section    : ZAA

I have done all the coding by myself and only copied the code that my
professor provided to complete my workshops and assignments.
*****************************************************************************
*/
In this workshop I learnt the following concepts:
1.design and code composition and aggregation class relationships
eg-class Restaurant
	{
		Reservation** reserve;
		size_t m_cnt;
	public:
		Restaurant();
.
.
.
size_t size() const;
		void display(std::ostream& os) const;
	};
Restaurant::Restaurant(const Reservation* reservations[], size_t cnt){
		m_cnt = cnt;
		reserve = new Reservation * [m_cnt];
		for (size_t i = 0; i < m_cnt; i++)
		{
			reserve[i] = new Reservation;
			*reserve[i] = *reservations[i];
		}
	}
Restaurant::~Restaurant(){
		for (size_t i = 0; i < m_cnt; i++)
		{
			delete reserve[i];
		}
		delete[] reserve;
	}
In the above example, I created a restaurant class that is responsible for the creation of
an array of Reservation class object called reserve. The destructor of the class Restaurant
is dallocation all the memory allocated in the Restaurant class constructor. This is a
composition relation.

class ConfirmationSender {
		const Reservation** m_pReserations;
		size_t m_cnt;
	public:
		ConfirmationSender();
.
.
.
ConfirmationSender& operator+=(const Reservation& res);
		ConfirmationSender& operator-=(const Reservation& res);
	};
In the above example, class ConfirmationSender has an array of const Reservation and it's
construction and destruction is independent of the class ConfirmationSender. The destructor
above only deallocates the array of const Reservation and  does not affect any address stored in
the array.


2.use member functions of the string class to parse a string into tokens based on simple rules
eg-string people = res.substr(res.find(name) + strlen(name.c_str()));
		people.erase(0, people.find(',') + 1);
		people.erase(0, people.find(',') + 1);
		people.erase(people.find(','));
		nopeople = stoi(people);
In the above example, I use substr(), erase(), find() and stoi() string class functions.
In first line, I am using substr to trim the 'res' string till second ',' and in the next line
I am triming the string stored in 'people' further to remove ',' before the data I want to store in
'nopeople' using erase(). At the end, I trimed the 'people' string further from the next ',' in string
to the end of the string. I used find() to spot the position of different ',' in string and trim it.


3.design and code a class that manages a dynamically allocated array of pointers to objects
eg-class Restaurant
	{
		Reservation** reserve;
		size_t m_cnt;
	public:
		Restaurant();
.
.
.
size_t size() const;
		void display(std::ostream& os) const;
	};
Restaurant::Restaurant(const Reservation* reservations[], size_t cnt){
		m_cnt = cnt;
		reserve = new Reservation * [m_cnt];
		for (size_t i = 0; i < m_cnt; i++)
		{
			reserve[i] = new Reservation;
			*reserve[i] = *reservations[i];
		}
	}
	Restaurant::~Restaurant(){
		for (size_t i = 0; i < m_cnt; i++)
		{
			delete reserve[i];
		}
		delete[] reserve;
	}
In the above example, class Restaurant manages a dynamically allocated array of pointers of type
Reservation of size m_cnt. In the constructor, I determine the size of the array first and then
dynamically store the value of another array of typr Reservation. In the destructor, I am deallocating
the memory inside the dynamic array of Reservation class instance and at the end deleting the array
itself.